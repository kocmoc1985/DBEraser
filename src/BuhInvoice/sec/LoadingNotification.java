/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * LoadingNotification.java
 *
 * Created on 2013-sep-25, 16:17:07
 */
package BuhInvoice.sec;

import BuhInvoice.GP_BUH;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

/**
 *
 * @author Administrator
 */
public class LoadingNotification extends javax.swing.JFrame implements Runnable {

    private boolean RUN = true;
    public static String TEXT;
    public static String LOADING_DOTS;

    /**
     * Creates new form LoadingNotification
     *
     * @param title
     * @param displayedText
     */
    public LoadingNotification(String title, String displayedText) {
        //
        TEXT = displayedText;
        LOADING_DOTS = "";
        initComponents();
        initOther(title, displayedText);
        startThread();
    }

    private void startThread() {
        Thread x = new Thread(this);
        x.start();
    }

    private void initOther(String title, String displayedText) {
        setIconImage(GP_BUH.getBuhInvoicePrimIcon());
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        setTitle(title);
        setTextJLabelRendered(jLabel1, displayedText);
//        this.jLabel1.setText("<html><p style='margin-left:5px'>" + displayedText + "</p></html>");
//        this.jLabel1.setText(displayedText);
    }

    private void setTextJLabelRendered(JLabel label, String text) {
        label.setText("<html><h3 style='margin-left:5px'>" + text + "</h3></html>");
    }

    public void setAnotherImageIcon(URL url) {
        setIconImage(new ImageIcon(url).getImage());
    }

    public void setAnotherImageIcon_b(ImageIcon ic) {
        setIconImage(ic.getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void show_() {
        new Thread(() -> {
            GP_BUH.centerAndBringToFront(this);
            this.setVisible(true);
            RUN = true;
            startThread();
        }).start();
    }

    public void hide_() {
        new Thread(() -> {
            this.setVisible(false);
            RUN = false;
            jLabel1.setText(TEXT);
            LOADING_DOTS = "";
        }).start();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        //
        while (RUN) {
            //
            //
            LOADING_DOTS = "";
//            jLabel1.setText(TEXT);
            setTextJLabelRendered(jLabel1, TEXT);
            //
            for (int i = 0; i < 20; i++) {
                //
                LOADING_DOTS += ".";
                setTextJLabelRendered(jLabel1, TEXT + LOADING_DOTS);
                wait_(1000);
                //
                if (RUN == false) {
                    break;
                }
                //
            }
            //
        }
    }

    private synchronized void wait_(int millis) {
        try {
            wait(millis);
        } catch (InterruptedException ex) {
            Logger.getLogger(LoadingNotification.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}

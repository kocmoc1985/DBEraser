[PROCEDURES, FUNCTIONS, EXECUTE][2021-05-11][SUPER IMPORTANT][SUPER IMPORTANT][SUPER IMPORTANT][LET THIS ONE BE ON TOP]

Search for tag: [#RUN-SQL-PROCEDURE-JAVA#]

As i understand per 2024-03-31 the main advantage of calling the PROCEDURES with a method like
runProcedureIntegerReturn_A(...) is that you will get the return only after the procedure has ended. 

So if you would run the procedure with common sql.execute(...) it would also run but you don’t know when 
The procedures is READY.

By getting a return when running runProcedureIntegerReturn_A(...) you also know if the procedure executed properly or not.
As example if you get 0 it’s ok if 1 it failed.

SOME IMPORTANT STATEMENTS:
1. Yes a procedure can return a "ResultSet" - this is 100% verified on [2021-05-11] 
-> search for [#RUN-SQL-PROCEDURE-JAVA#][#RESULT-SET-RETURN-JAVA#] in the "DBEraser" project
2. Procedures can also return an "Int" - an error code or something (It’s not obligatory to return an Int though)
3. When using with Java a Procedure shall only have one return

Some important notes:
"Sql-procedures" are mainly used for other things then returning a ResultSet. An example of using Sql-procedures is
insertion, delitions, updating.. "Sql-functions" on other hand are mainly used for "SELECT" statements.

Other notes:


_______________________________________________________________________________________________

[ADDING NEW TAB PROCEDURE]

Start from: "MCRecipe.lang -> LNG.class"

Hint: find USAGES for example for -> "public static String LAB_DEVELOPMENT_TAB__TAB_TEST_DEFINITION()"

______________________________________________________________________________________________
[ORDER DEVELOPMENT - STATUSES]

See class: "LabDev.package -> LAB_DEV__STATUS.class".

Remember that the "status" is always stored in "ENG" in the DataBase. (Table: "MC_Cpworder", Column: "WOSTATUS")

______________________________________________________________________________________________
[MARKING SAVED / UNSAVED]

Marking "UNSAVED" done from: UnsavedEntryInvert.class -> getValueFromDataField()

Marking "SAVED" done from: TableInvert.class -> applyChanges()

______________________________________________________________________________________________

[UPDATED ON - UPDATED BY - TABLE INVERT]

- The tableInvert MUST contain both "UpdatedOn" and "UpdatedBy" to be able to automatically save.
- You may have both of them not visible, but the update function will work
______________________________________________________________________________________________

[DATE FORMAT TABLE-INVERT - HOW IS DATE FORMAT DEFINED - SUPER IMPORTANT][2020-11-03]
See usages of variable: GP.IS_DATE_FORMAT_DE 

______________________________________________________________________________________________

[WHAT IS NEEDED TO DO WITH DATABASE-TABLE IN ORDER TO USE IT WITH TABLE-INVERT][2020-11-03]

- "ID" field required -> The ID field MUST also be "AUTO_INCREMENT"
- "UpdatedOn" field required
- "UpdatedBy" field required

______________________________________________________________________________________________
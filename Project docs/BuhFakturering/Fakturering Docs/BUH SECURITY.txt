________________________________________________________________________________________________________
[HASHING]

So the main idea with hashing is that if a hacker get access to the DATABASE he will not be able to unhash a password.
So the idea is not that the hacker attacks from the login-page.

The comments below (A,B) are taken from StackOverflow:
A. Upon registration, the user sends her password to the server. The server generates a random salt, and stores the salted hash and the salt.
B. Upon login, the user again sends her password to the server. The server retrieves the stored salt for that user, rehashes the password with it, and compares it to the stored hash.
Salts create unique passwords even in the instance of two users choosing the same passwords. Salts help us mitigate rainbow table attacks by forcing attackers to re-compute them using the salts.
________________________________________________________________________________________________________
[USER VALIDATION][2020-10-07]

OBS! Switch to only using "PDO" for all DB requests!!!!********************************IMPORTANT****************
Functions still using the "mysqli":
- latest() - phpFunc: get_latest
- getLatestFakturaNr() - phpFunc:  get_latest_faktura_nr
- insert_buh_faktura_kund_return_fakturaKundId()  - phpFunc: faktura_kund_to_db

$stmt = executeSelectQuery_ASSOC_PDO($q);
$row = $stmt->fetch();
$kundId = $row['kundId'];

OBS!!!!!!!!!!!!!!!!!!!!!! Fix "insert()" FUNCTION ******************************************

Search for "pdo execute select with fetch" in google



OBS! "Salting" is obligatory in cases when 2 users accedentially have same username & password. If i generate users by my self it's not the case.

____________

Search for TAG: [#SEQURITY#] in both "DBEraser" and "MCWebNew" projects

PHP side, see: "_http_buh.php" -> "validate()"
Java side, see: "HelpBuh.class -> executePHP(String phpScriptName, String phpFunctionName, String json)"

1. PHP -> "_http_buh.php" -> "validate()" function is called first of all functions and if not "passed" the whole script will not execute further.
2. Java -> "BUH_INVOICE_MAIN.class" -> "DEFINE_KUNDID()"

A. Even if a hacker nows some "kundId" it's not possible to use it somehow as the validation is done uppon ALL of the requests.
________________________________________________________________________________________________________
[SQL INJECTION] [2020-08-07]

See in "lib.php": "function connectPDO()" && "function executePreparedQueryPdo($q, $valuesArray)"

======================

"PREPARED STATEMENTS" are implemented for "INSERT" and "UPDATE" [2020-08-XX] 

======================

ESCAPE / UNESCAPE -> ALL "ESCAPING" IS DONE ON JAVA SIDE

[INCOMMING FROM PHP -> JAVA]
See: HelpBuh.class -> http_get_content_post(..) -> "return StringEscapeUtils.unescapeJava(value)"

[OUTGOING FROM JAVA -> PHP]
See: JSon.hashMapToJSON() -> StringEscapeUtils.escapeJava(value):
As example a String="Åland" is escaped to "\u00C5land"

======================
________________________________________________________________________________________________________




________________________________________________________________________________________________________
OLD INFO:

[HIGH VULNERABILITIES] [2020-08-07]

1. "INSERT" and "UPDATE" procedures as they use input from user



[LOW VULNERABILITIES] [2020-08-07]

1. "SELECT" procedures seems to be "low risk" as they are not based on INPUT from user
________________________________________________________________________________________________________
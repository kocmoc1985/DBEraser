________________________________________________________________________________________________________
[HTTPS][2020-11-16]

one.com -> does have support for certificates from -> "https://letsencrypt.org/"

So i can already use: https://www.mixcont.com 

Important to mention that Java must also have support for certificates from -> "https://letsencrypt.org/"

As i have found on internet the first version supporting certificates from "https://letsencrypt.org/" is 1.8u60 or 1.8u66

My test did show that following Java version do have support:
1.8.0_152_32_Oracle Corporation (JRE!) -> This version is installed on my work pc HPWORK [2020-11-16]
1.8.0_212_64_Eclipse OpenJ9 -> This is the one installed at at my Win10 pro laptop [2020-11-16]
1.8.0_252_64_Azul Systems -> This the one installed on my Mac book OS X [2020-11-16]

Versions not having support[100% verified]:
1.8.0_65_32_Oracle Corporation (JDK!) -> This version is installed on my work pc HPWORK [2020-11-16] -> Note that on HPWORK different versions are installed
for JDK and JRE so running from NetBeans will fail but compiling and runing a .jar will work

Implementation Java side:
DBEraser.proj -> BuhInvoice.package -> HelpBuh.class -> see: "private static final boolean HTTPS"

Implementation PHP side:
Absolutely NOTHING [100% verified]

________________________________________________________________________________________________________
[BAN IP/MAC IF VALIDATE FAILS SEVERAL TIMES][2020-10-24]

________________________________________________________________________________________________________
[DELETE ALL DATA RELATED TO CUSTOMER][2020-11-16]

At the moment [2020-11-16] the account/kund can be only removed manually by the HttpBuh.class -> "deleteCustomer_a()" --> This method is infact only for development and should be removed 
This method is using "admin password" which is stored hard coded on the website ("Vxuw6lpMzF").

OBS! Note this method "deleteCustomer_a()" -> is called BEFORE the most IMPORTANT "validate()" method.

"deleteCustomer_a()" -> sends "kundId" -> which is in fact "deprecated" -> the "kundId" shall be only defined at PHP side

________________________________________________________________________________________________________
[OBFUSCATION][2020-11-16]

Obfuscation is implemented at least on HPWORK, and working properly.

Think how to obfuscate the static methods in the: HelpBuh.class


________________________________________________________________________________________________________
[**KUNDID** SHALL BE ONLY DEFINED AT THE PHP SIDE][2020-10-26]

Tags:
PHP: [#$KUND_ID$#]
JAVA: [#KUND-ID-INSERT#]

KUND ID SHALL BE NEVER SENT TO PHP BUT DEFINED AT PHP-SIDE -> Otherwise the hacker can get information for other clients.

[VALIDATE]"kundId" is now defined each time in the "validate()" function. Search for the [#$KUND_ID$#] tag -> in the _http_buh.php

[UPDATE]So function "update()" is now secured by the "kundId" which is NOT SENT by the user but validated at the PHP side

[INSERT]The "insert()" function is now not taking into account the "kundId" sent by the user. The "kundId" is defined always on PHP side!
OBS! NOTE: The user MUST send the "kundId" in any case, this is needed for creating the prepared query. The value which is sent
has no meaning and is replaced with the real "kundId" at the PHP-Side.
Search for tag [#KUND-ID-INSERT#] in the Java project.

[SELECT]The "select()" function, is now also using "kundId" which is set on PHP side.
[DELETE] - yes also using "kundId" defined at PHP side

OBS! [#KUND-ID-INSERT#] tag is valid not only for insert -> You may also search for "777" as i replaced all the places where kundId was used with this number.

To check later:
exist() funtction still using "mysqli". "kundId" is now set on PHP side
________________________________________________________________________________________________________
[SEQURITY FUNCTIONS - VALIDATE FUNCTION][2020-10-07]

Search for TAG: [#SEQURITY#] in both "DBEraser" and "MCWebNew" projects

PHP side, see: "_http_buh.php" -------------------------------------------------------------------------------> "validate()"
Java side, see: "HelpBuh.class -> executePHP(String phpScriptName, String phpFunctionName, String json)"

1. PHP -> "_http_buh.php" -> "validate()" function is called first of all functions and if not "passed" the whole script will not execute further ***********IMPORTANT
1.2 In fact there are some functions called before "validate()" -> all except the getVersion(), restorePwd() and createAccountMain() shall be removed in future
2. Java -> "BUH_INVOICE_MAIN.class" -> "DEFINE_KUNDID()"

A. Even if a hacker nows some "kundId" it's not possible to use it somehow as the validation is done uppon ALL of the requests.
________________________________________________________________________________________________________

[SHARING OF USER ACCOUNT][2020-10-22]

PHP see: "_http_buh.php" -> "shareAccount()"
Java see: "HelpBuh.class" -> shareAccount(String userEmailToShareWith)

USERNAME('user') -> IS UNIQUE on DB level

Guest account -> field "master" in DB (value:0 = guest)

[GUEST ACCOUNT FORMAT]
Guest account format: "guest_[kundId]_[email]" -> "guest_21_kocmoc1985@gmail.com"

[RESTRICTIONS]
No possibility to share account

________________________________________________________________________________________________________
[CREATION OF USER ACCOUNT (MASTER)][2020-10-14]

PHP see: "_http_buh.php" -> "createAccountMain()"
Java see: "HelpBuh.class" -> "createAccountPHP_main(String emailUserName, String ftgname, String orgnr)"

OBS! The password is created at PHP-side randomly

Master account -> field "master" in DB (value:1 = master)

Important to mention: when the user account is created "buh_kund" and "buh_address" are also created

[RESTRICTIONS]
1. You cannot create 2 users with the same username. User -> IS UNIQUE on DB level.
2. The user is not allowed to create more then 2 accounts from the same PC (MAC-ADDR) check.
________________________________________________________________________________________________________
[PASSWORD HASHING & USER VALIDATION][2020-10-07]

So the main idea with hashing is that if a hacker get access to the DATABASE he will not be able to unhash a password.
So the idea is not that the hacker attacks from the login-page.

HASHING IS DONE IN: "_http_buh.php" -> "createAccount()" ----------> Using PHP's embeded "password_hash($pass,PASSWORD_DEFAULT)"
PASS VALIDATION IS DONE: _http_buh.php" -> "check_login($user, $pass)" ---------> Using PHP's embeded "password_verify($pass, $passHashed)"

________________________________________________________________________________________________________

[SQL INJECTION - PREPARED STATEMENTS] [2020-08-07]

See in "lib.php": "function connectPDO()" && "function executePreparedQueryPdo($q, $valuesArray)"

__________

"PREPARED STATEMENTS":

Note important to know when using:
1. Pay attentione at this example: $q = "SELECT MAX($column) as `latest` FROM $table WHERE kundId=?"; ---> PDO does not support replacing "$column" and "$table" with "?" [2020-10-08]
2. The values which are set instead of "?" should not contain additional "''"

IMPLEMENTED prepared statements for **ALL** functions including SELECT and other [2020-10-08]


__________

ESCAPE / UNESCAPE -> ALL "ESCAPING" IS DONE ON JAVA SIDE

[INCOMMING FROM PHP -> JAVA]
See: HelpBuh.class -> http_get_content_post(..) -> "return StringEscapeUtils.unescapeJava(value)"

[OUTGOING FROM JAVA -> PHP]
See: JSon.hashMapToJSON() -> StringEscapeUtils.escapeJava(value):
As example a String="Åland" is escaped to "\u00C5land"

======================
________________________________________________________________________________________________________




________________________________________________________________________________________________________
OLD INFO:

[HIGH VULNERABILITIES] [2020-08-07]

1. "INSERT" and "UPDATE" procedures as they use input from user



[LOW VULNERABILITIES] [2020-08-07]

1. "SELECT" procedures seems to be "low risk" as they are not based on INPUT from user
________________________________________________________________________________________________________
________________________________________________________________________________________________________
[OBS! DONT FORGET THE BUH_SECURITY.vsd]

________________________________________________________________________________________________________
[SECURITY WEEKPOINTS][2021-06-08]

Things to think about and protect in feature:

[DIFFERENT-ATTACKS]:
- in many places in the "_http_buh.php" i am doing the echo "[###status:$q###]\n"; -> this reveals the construction of query to the hacker. -> search for [#QUERY-ECHO-SECURITY-BREACH#]

[SLOW-DOWN-ATTACKS]:
- A hacker may utilize the function for creating/sharing a user. I mean running it with faked users so the PHP-Side will be forced to create the users
in a loop which will highly likely almostly kill the server side. So why is this function "särskillt" vulnerable, yes because it's processed
before the validation - in general all methods which occurs before validation shall be secured.  
[2021-06-09] OBS! now i see "AGAIN" that maximum 2 users can be created from a PC with same MAC -> BUT the hacker may offcourse MANIPULATE the MAC addr -> 
So yes this requires to be solved somehow

- In fact a hacker can use any of the methods on back-end using a valid login - so let's say you make a code
which inserts invoices, customers or what ever in a loop. This will surely cause problems for the server-side.

________________________________________________________________________________________________________
["DOS ATTACK" PREVENTION][2021-09-22]

The main idea is to prevent a hacker to make a big ammount of "calls" to the server.

IN FACT IT'S NOT A "DDOS-ATACK PREVENTION" but prevention of "LOOP-ATTACK" when trying to reveal a password or..

WHAT WILL IT PREVENT / WHEN IT IS EFFECTIVE:
1. If a hacker makes a login attempt in a loop he will be blocked - which means he will be "baned" before reaching the "validate()" function.
In other words it will be effective when a hacker tries to reveal an login within a "LOOP".

IT WILL NOT PREVENT / WHEN IT IS NOT EFFECTIVE:
1. Let's say a hacker uses a valid login, and starts to upload *BIG FILES* (i would like to remember that files larger then 500kb are abandoned but only AFTER the upload finishes - read more in "BUH SECURITY.txt”).
2. The hacker might make a slow loop with "<25 calls within 3 seconds" this will not be blocked
3. It will not work if the hacker changes the ip upon each call

DISADVANTAGES: 
1. As the db is in use, each time when the functionality is used, exactly two calls are made to the db. The first call when "loggCall__dos_attack()" is called
and the second when the "check__if__dos_attack()" is called. So any call consumes server capacity - how much is difficult to estimate...

At the moment i see two types of sulutions regarding the mechanism of "BAN":
1. [THIS SOLUTION IS IMPLEMENTED]Check uppon each call if the "x-calls/x-seconds" is exceeded and make php "exit()" -> in this case the "buh_ban" table is not needed.
2. Nearly the same as "1" but with adding to the "buh_ban" ----> NOT Sure it's needed at the moment, maybe later.

ABOUT AMMOUNT OF CALLS:
Meassured approximate calls/second when making many and fast actions with the program -> 0.815 calls/second 
1. Start + login = 8 calls
2. Start + login + grafisk vy = 10 calls
3. Start + login + switch invoice x2 = 10 calls (within 10 seconds)
4. Just opening the preview of invoice = 7 calls (within 2 seconds)

THE ACTUAL LIMIT/CONDITION:
[>= 25 CALLS WITHIN 3 SECONDS] -> if this limit is exceeded it's considered as a "dos-attack" and "exit()" function is called which stops from exucuting the script further.
The limit above is rather tight but seems to be GOOD. At the moment i don't see a situation where 25 calls within 3 seconds can be done.

WHEN IS THE TABLE CLEARED:
[($calls > 3 && $calls <= 10)] -> more then 3 calls but less then 10 calls within 3 seconds -> then the table is cleared

MSSQL table: "buh_dos_attack"
MSSQL working query example: SELECT ip, COUNT(ip) as ammount FROM buh_dos_attack WHERE date_call >= NOW() - INTERVAL 1 DAY AND ip='94.234.172.7'   ---> OBS! The possible time units are: FRAC_SECOND (microseconds), SECOND, MINUTE, HOUR, DAY, WEEK, MONTH, QUARTER, or YEAR
PHP-Side: 100% everything on php-side
Search for tag [#DOS-ATTACK#]
________________________________________________________________________________________________________
[SMTP - PHPMailer - SECURITY THREAT?]

I was using SMTP in BuhInvoice with andrei.brassas@mixcont.com
On 2021-05-2X the email mentioned above was hacked. Now i suspect
that PHPMailer could hand over the password to third-party

________________________________________________________________________________________________________
[FILE UPLOAD / SENDING EMAILS WITH ATTACHMENT / SECURITY][2021-02-11]

Preamble: The initial problem which i discovered [2021-02-11] was that a file upload could be made without "validation".
This made that the upload functionality is now secured by several features, see below.


IMPORTANT DETAILS - SECURITY DETAILS:
0. Yes since [2021-02-12] it's not possible to upload without validation. The validation is done in: _u_u_u_x_upload.php -> 
1. Making the upload is now handled with "//:https". See: HelpBuh.class -> https_send_image(...) 
2. Max upload size = 500kb (500 000bytes) and the is restricted on PHP side. See: _u_u_u_x_upload.php -> file_get_contents('php://input', FALSE, NULL, 0, 500000)
2.2 Note that this "size restriction" does not stop uploading when it reaches 500kb! What will happen is that it will not save the file on the server side.
3. The type of uploaded file is checked when the file is uploaded. See: _u_u_u_x_upload.php -> mime_content_type($filename).
3.2 The "mime_content_type()" is not checking by the fileextenssion. So if i change extension of a ".pdf" file to ".txt" it will in any case detect that's it's a ".pdf"
4. The filename of the upload is now also checked. The file must contain "faktura" or "minnelse".

POTENTIAL SECURITY RISKS:
1. A hacker may use a valid login data. Extract the "HelpBuh.uploadFile(...)" method. And make a loop with uploading one after another, even if it's 
not infected files it will eventually slow down my website/service.


Java essential places:
1. HTMLPrint.class -> print_upload_sendmail(String serverPath, String fileName, String sendToEmail, String ftgName) -> HelpBuh.uploadFile(fileName, serverPath + fileName)
2. Start with looking at "HelpBuh.uploadFile()"


PHP essential places:
_u_u_u_x_upload.php

________________________________________________________________________________________________________
[HTTPS][2020-11-16]

one.com -> does have support for certificates from -> "https://letsencrypt.org/"

So i can already use: https://www.mixcont.com 

Important to mention that Java must also have support for certificates from -> "https://letsencrypt.org/"

As i have found on internet the first version supporting certificates from "https://letsencrypt.org/" is 1.8u60 or 1.8u66

My test did show that following Java version do have support:
1.8.0_152_32_Oracle Corporation*** (JRE!) -> This version is installed on my work pc HPWORK [2020-11-16]
1.8.0_212_64_Eclipse OpenJ9 -> This is the one installed at at my Win10 pro laptop [2020-11-16]
1.8.0_252_64_Azul Systems -> This the one installed on my Mac book OS X [2020-11-16]

Versions not having support[100% verified]:
1.8.0_65_32_Oracle Corporation (JDK!) -> This version is installed on my work pc HPWORK [2020-11-16] -> Note that on HPWORK different versions are installed
for JDK and JRE so running from NetBeans will fail but compiling and runing a .jar will work

***Not regarding the BuhInvoice project, but essential information. Java version 1.8.0_152/32_Oracle did not work with "https" 
on Trelleborg 10.57.8.10 Server (Project NetProcmonitor - NPMS Server)[2021-03-24]


Implementation Java side:
DBEraser.proj -> BuhInvoice.package -> HelpBuh.class -> see: "private static final boolean HTTPS"

Implementation PHP side:
Absolutely NOTHING [100% verified]

________________________________________________________________________________________________________
[LOGIN ATTEMPT CONNECTION MARKER]

Since [2020-12-23] i have implemented a so called "LOGIN ATTEMPT MARKER" -> which means that the current connection is a "LOGIN ATTEMPT".
At the moment it's beeing used for sending of an email when a "guest account" logs in

See: _http_buh.php -> isLoginAttempt()

Also search for: "login_attempt_marker" in both projects
________________________________________________________________________________________________________
[ADDITIONAL INFO REGARDING LOGIN PROCEDURE][2021-09-22]

If the user fails the validation: check_login_local($user, $pass, true) -> the "failed login attempt" will be written to "buh_login_failed" table
If the user will make a successful login after he failed the record will be REMOVED from the "buh_login_failed" table: delete_from__buh_login_failed__if_login_ok($user)

________________________________________________________________________________________________________
[BAN IP/MAC IF VALIDATE FAILS SEVERAL TIMES][2020-10-24]

The ban is priliminary implemented. The BAN functionality is 100% on PHP side.

Search for: [#BAN-IP#] in the "_http_buh.php"

Essentials: 

1. The algorithm checks for combination of [user + ip]
2. If combination of [user + ip] fails ">=10" this combination will be written to the "buh_ban" table.
3. If combination of [user + ip] failed 7 times and succeded on 8, all the entries where this combination of [user + ip] occures will be deleted.

As example [ask@mixcont.com / 94.234.43.186] is banned but it will not block [andrej.brassas@gmail.com / 94.234.43.186] from logging in.

The BAN is active if "date_ban" is not older then 0.5 days (12 howrs) *****
SELECT COUNT(user) AS ban_nr FROM buh_ban WHERE date_ban - INTERVAL 0.5 DAY < NOW() AND user=? AND ip=?

The ban entry in DB will be REMOVED from the "buh_ban" table after the BAN is not longer active. OBS! It removes an entry which matches the combination of [user + ip]
________________________________________________________________________________________________________
[DELETE ALL DATA RELATED TO CUSTOMER][2020-12-23]

Is implemented [2020-12-23]

See: "_http_buh.php -> deleteCustomer_b()" 

OBS! This function requires that the username and pass used for login are provided as an additional secutiry layer

[OLD NOTES]:
At the moment [2020-11-16] the account/kund can be only removed manually by the HttpBuh.class -> "deleteCustomer_a()" --> This method is infact only for development and should be removed 
This method is using "admin password" which is stored hard coded on the website ("Vxuw6lpMzF").

OBS! Note this method "deleteCustomer_a()" -> is called BEFORE the most IMPORTANT "validate()" method.

"deleteCustomer_a()" -> sends "kundId" -> which is in fact "deprecated" -> the "kundId" shall be only defined at PHP side

________________________________________________________________________________________________________
[OBFUSCATION][2020-11-16]

Obfuscation is implemented at least on HPWORK, and working properly.

Think how to obfuscate the static methods in the: HelpBuh.class


________________________________________________________________________________________________________
[**KUNDID** SHALL BE ONLY DEFINED AT THE PHP SIDE][2020-10-26]

Tags:
PHP: [#$KUND_ID$#]
JAVA: [#KUND-ID-INSERT#]

KUND ID SHALL BE NEVER SENT TO PHP BUT DEFINED AT PHP-SIDE -> Otherwise the hacker can get information for other clients.

[VALIDATE]"kundId" is now defined each time in the "validate()" function. Search for the [#$KUND_ID$#] tag -> in the _http_buh.php

[UPDATE]So function "update()" is now secured by the "kundId" which is NOT SENT by the user but validated at the PHP side

[INSERT]The "insert()" function is now not taking into account the "kundId" sent by the user. The "kundId" is defined always on PHP side!
OBS! NOTE: The user MUST send the "kundId" in any case, this is needed for creating the prepared query. The value which is sent
has no meaning and is replaced with the real "kundId" at the PHP-Side.
Search for tag [#KUND-ID-INSERT#] in the Java project.

[SELECT]The "select()" function, is now also using "kundId" which is set on PHP side.
OBS! OBS! OBS! When you make the query for the "select()" you must always use "WHERE kundId=%s AND ...."
if you will not have "kundId=%s" in this case consider following:
"SELECT * FROM buh_address WHERE fakturaKundId=%s ORDER BY id ASC" -> THIS ONE IS WRONG because you can set any "fakturaKundId" manually and you will be able to get all data
"SELECT * FROM buh_address WHERE kundId=%s AND fakturaKundId=%s ORDER BY id ASC" -> THIS ONE IS CORRECT because the "kundId" is defined on PHP side

[DELETE] - yes also using "kundId" defined at PHP side

OBS! [#KUND-ID-INSERT#] tag is valid not only for insert -> You may also search for "777" as i replaced all the places where kundId was used with this number.

SO A POSSIBLE ATTACK SCENARIO[2021-05-26]:
Let's say you use your own login data and run the scripts with setting the parameters manually:

So you may just make following in case if the query did not have "WHERE buh_faktura.kundId=%s":
	//
	String json = BUH_INVOICE_MAIN.getSELECT_(DB.BUH_FAKTURA__ID__, "339");
	//
	try {
			//
			String json_str_return = HelpBuh.executePHP(DB.PHP_SCRIPT_MAIN,
					DB.PHP_FUNC_PARAM_GET_ONE_FAKTURA_ALL_DATA, json);  // DB.PHP_FUNC_PARAM_GET_ONE_FAKTURA_ALL_DATA -> "SELECT * FROM buh_faktura WHERE buh_faktura.kundId=%s AND fakturaId=%s"
			//
			ArrayList<HashMap<String, String>> entries = JSon.phpJsonResponseToHashMap(json_str_return);
			//
			for (HashMap<String, String> val : entries) {
				System.out.println("out: " + val);
			}
			//
	} catch (Exception ex) {
			Logger.getLogger(HelpBuh.class.getName()).log(Level.SEVERE, null, ex);
	}
	//
	//
CONCLUSION: NOT HAVING "WHERE buh_faktura.kundId=%s" should have made that you could just randomize the "fakturaId" and gain all faktura data for any customer

________________________________________________________________________________________________________
[SEQURITY FUNCTIONS - VALIDATE FUNCTION][2020-10-07]

Search for TAG: [#SEQURITY#] in both "DBEraser" and "MCWebNew" projects

PHP side, see: "_http_buh.php" -------------------------------------------------------------------------------> "validate()"
Java side, see: "HelpBuh.class -> executePHP(String phpScriptName, String phpFunctionName, String json)"

1. PHP -> "_http_buh.php" -> "validate()" function is called first of all functions and if not "passed" the whole script will not execute further ***********IMPORTANT
1.2 In fact there are some functions called before "validate()" -> all except the getVersion(), restorePwd() and createAccountMain() shall be removed in future
2. Java -> "BUH_INVOICE_MAIN.class" -> "DEFINE_KUNDID()"

A. Even if a hacker knows some "kundId" it's not possible to use it somehow as the validation is done uppon ALL of the requests.
________________________________________________________________________________________________________

[SHARING OF USER ACCOUNT][2020-10-22]

PHP see: "_http_buh.php" -> "shareAccount()"
Java see: "HelpBuh.class" -> shareAccount(String userEmailToShareWith)

USERNAME('user') -> IS UNIQUE on DB level

Guest account -> field "master" in DB (value:0 = guest)

[GUEST ACCOUNT FORMAT]
Guest account format: "guest_[kundId]_[email]" -> "guest_21_kocmoc1985@gmail.com"

[RESTRICTIONS]
No possibility to share account

________________________________________________________________________________________________________
[CREATION OF USER ACCOUNT (MASTER)][2020-10-14]

PHP see: "_http_buh.php" -> "createAccountMain()"
Java see: "HelpBuh.class" -> "createAccountPHP_main(String emailUserName, String ftgname, String orgnr)"

OBS! The password is created at PHP-side randomly

Master account -> field "master" in DB (value:1 = master)

Important to mention: when the user account is created "buh_kund" and "buh_address" are also created

[RESTRICTIONS]
1. You cannot create 2 users with the same username. User -> IS UNIQUE on DB level.
2. The user is not allowed to create more then 2 accounts from the same PC (MAC-ADDR) check.
________________________________________________________________________________________________________
[PASSWORD HASHING & USER VALIDATION][2020-10-07]

So the main idea with hashing is that if a hacker get access to the DATABASE he will not be able to unhash a password.
So the idea is not that the hacker attacks from the login-page.

HASHING IS DONE IN: "_http_buh.php" -> "createAccount()" ----------> Using PHP's embeded "password_hash($pass,PASSWORD_DEFAULT)"
PASS VALIDATION IS DONE: _http_buh.php" -> "check_login($user, $pass)" ---------> Using PHP's embeded "password_verify($pass, $passHashed)"

________________________________________________________________________________________________________

[SQL INJECTION - PREPARED STATEMENTS] [2020-08-07]

See in "lib.php": "function connectPDO()" && "function executePreparedQueryPdo($q, $valuesArray)"

__________

"PREPARED STATEMENTS":

Note important to know when using:
1. Pay attentione at this example: $q = "SELECT MAX($column) as `latest` FROM $table WHERE kundId=?"; ---> PDO does not support replacing "$column" and "$table" with "?" [2020-10-08]
2. The values which are set instead of "?" should not contain additional "''"

IMPLEMENTED prepared statements for **ALL** functions including SELECT and other [2020-10-08]

__________

ESCAPE / UNESCAPE -> ALL "ESCAPING" IS DONE ON JAVA SIDE

[INCOMMING FROM PHP -> JAVA]
See: HelpBuh.class -> http_get_content_post(..) -> "return StringEscapeUtils.unescapeJava(value)"

[OUTGOING FROM JAVA -> PHP]
See: JSon.hashMapToJSON() -> StringEscapeUtils.escapeJava(value):
As example a String="Åland" is escaped to "\u00C5land"

======================
________________________________________________________________________________________________________




________________________________________________________________________________________________________
OLD INFO:

[HIGH VULNERABILITIES] [2020-08-07]

1. "INSERT" and "UPDATE" procedures as they use input from user



[LOW VULNERABILITIES] [2020-08-07]

1. "SELECT" procedures seems to be "low risk" as they are not based on INPUT from user
________________________________________________________________________________________________________
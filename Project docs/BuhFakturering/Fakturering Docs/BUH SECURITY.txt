[CREATION OF USER ACCOUNT][2020-10-14]

PHP see: "_http_buh.php" -> "createAccountMain()"
Java see: "HelpBuh.class" -> "createAccountPHP_main(String emailUserName, String ftgname, String orgnr)"

OBS! The password is created at PHP-side randomly

Important to mention: when the user account is created "buh_kund" and "buh_address" are also created
________________________________________________________________________________________________________
[PASSWORD HASHING & USER VALIDATION][2020-10-07]

So the main idea with hashing is that if a hacker get access to the DATABASE he will not be able to unhash a password.
So the idea is not that the hacker attacks from the login-page.

HASHING IS DONE IN: "_http_buh.php" -> "createAccount()" ----------> Using PHP's embeded "password_hash($pass,PASSWORD_DEFAULT)"
PASS VALIDATION IS DONE: _http_buh.php" -> "check_login($user, $pass)" ---------> Using PHP's embeded "password_verify($pass, $passHashed)"

________________________________________________________________________________________________________
[SEQURITY FUNCTIONS][2020-10-07]

Search for TAG: [#SEQURITY#] in both "DBEraser" and "MCWebNew" projects

PHP side, see: "_http_buh.php" -> "validate()"
Java side, see: "HelpBuh.class -> executePHP(String phpScriptName, String phpFunctionName, String json)"

1. PHP -> "_http_buh.php" -> "validate()" function is called first of all functions and if not "passed" the whole script will not execute further.
2. Java -> "BUH_INVOICE_MAIN.class" -> "DEFINE_KUNDID()"

A. Even if a hacker nows some "kundId" it's not possible to use it somehow as the validation is done uppon ALL of the requests.
________________________________________________________________________________________________________
[SQL INJECTION - PREPARED STATEMENTS] [2020-08-07]

See in "lib.php": "function connectPDO()" && "function executePreparedQueryPdo($q, $valuesArray)"

__________

"PREPARED STATEMENTS":

Note important to know when using:
1. Pay attentione at this example: $q = "SELECT MAX($column) as `latest` FROM $table WHERE kundId=?"; ---> PDO does not support replacing "$column" and "$table" with "?" [2020-10-08]
2. The values which are set instead of "?" should not contain additional "''"

IMPLEMENTED prepared statements for **ALL** functions including SELECT and other [2020-10-08]


__________

ESCAPE / UNESCAPE -> ALL "ESCAPING" IS DONE ON JAVA SIDE

[INCOMMING FROM PHP -> JAVA]
See: HelpBuh.class -> http_get_content_post(..) -> "return StringEscapeUtils.unescapeJava(value)"

[OUTGOING FROM JAVA -> PHP]
See: JSon.hashMapToJSON() -> StringEscapeUtils.escapeJava(value):
As example a String="Åland" is escaped to "\u00C5land"

======================
________________________________________________________________________________________________________




________________________________________________________________________________________________________
OLD INFO:

[HIGH VULNERABILITIES] [2020-08-07]

1. "INSERT" and "UPDATE" procedures as they use input from user



[LOW VULNERABILITIES] [2020-08-07]

1. "SELECT" procedures seems to be "low risk" as they are not based on INPUT from user
________________________________________________________________________________________________________
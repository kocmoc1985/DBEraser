[USER VALIDATION][2020-10-07]

OBS! Switch to only using "PDO" for all DB requests!!!!********************************IMPORTANT*****************
Search for "pdo execute select with fetch" in google

OBS! "Salting" is obligatory in cases when 2 users accedentially have same username & password. If i generate users by my self it's not the case.

____________

Search for TAG: [#SEQURITY#] in both "DBEraser" and "MCWebNew" projects

PHP side, see: "_http_buh.php" -> "validate()"
Java side, see: "HelpBuh.class -> executePHP(String phpScriptName, String phpFunctionName, String json)"

1. PHP -> "_http_buh.php" -> "validate()" function is called first of all functions and if not "passed" the whole script will not execute further.
2. Java -> "BUH_INVOICE_MAIN.class" -> "DEFINE_KUNDID()"

A. Even if a hacker nows some "kundId" it's not possible to use it somehow as the validation is done uppon ALL of the requests.
________________________________________________________________________________________________________
[SQL INJECTION] [2020-08-07]

See in "lib.php": "function connectPDO()" && "function executePreparedQueryPdo($q, $valuesArray)"

======================

"PREPARED STATEMENTS" are implemented for "INSERT" and "UPDATE" [2020-08-XX] 

======================

ESCAPE / UNESCAPE -> ALL "ESCAPING" IS DONE ON JAVA SIDE

[INCOMMING FROM PHP -> JAVA]
See: HelpBuh.class -> http_get_content_post(..) -> "return StringEscapeUtils.unescapeJava(value)"

[OUTGOING FROM JAVA -> PHP]
See: JSon.hashMapToJSON() -> StringEscapeUtils.escapeJava(value):
As example a String="Åland" is escaped to "\u00C5land"

======================
________________________________________________________________________________________________________




________________________________________________________________________________________________________
OLD INFO:

[HIGH VULNERABILITIES] [2020-08-07]

1. "INSERT" and "UPDATE" procedures as they use input from user



[LOW VULNERABILITIES] [2020-08-07]

1. "SELECT" procedures seems to be "low risk" as they are not based on INPUT from user
________________________________________________________________________________________________________
[FUNCTION update() SECURITY THREAT DISCOVERED]

KUND ID SHALL BE NEVER SENT TO PHP BUT DEFINED AT PHP-SIDE

"kundId" is now defined each time in the "validate()" function. Search for the [#$KUND_ID$#] tag -> in the _http_buh.php

So function "update()" is now secured by the "kundId" which is NOT SENT by the user but validated at the PHP side

The "insert()" function is now not taking into account the "kundId" sent by the user. The "kundId" is defined always on PHP side!
OBS! NOTE: The user MUST send the "kundId" in any case, this is needed for creating the prepared query. The value which is sent
has no meaning and is replaced with the real "kundId" at the PHP-Side.
Search for tag [#KUND-ID-INSERT#] in the Java project.

The "select()" function, is now also using "kundId" which is set on PHP side.

OBS! [#KUND-ID-INSERT#] tag is valid not only for insert

[MAKE URGENTLY]: search for usage of "GP_BUH.KUND_ID" --> [DONE]
In all cases with insert replace with "777" and mark the place with [#KUND-ID-INSERT#] tag

[MAKE URGENTLY, NEXT]
delete() function does not use prepared quries AND does not explicetly use the "kundId", which is dangerous

To check later:
exist() funtction still using "mysqli". "kundId" is now set on PHP side
________________________________________________________________________________________________________
[BAN IP/MAC IF VALIDATE FAILS SEVERAL TIMES][2020-10-24]

________________________________________________________________________________________________________
[SHARING OF USER ACCOUNT][2020-10-22]

PHP see: "_http_buh.php" -> "shareAccount()"
Java see: "HelpBuh.class" -> shareAccount(String userEmailToShareWith)

USERNAME('user') -> IS UNIQUE on DB level

[GUEST ACCOUNT FORMAT]
Guest account format: "guest_[kundId]_[email]" -> "guest_21_kocmoc1985@gmail.com"

[GUEST ACCOUNT RESTRICTIONS]
No possibility to share account

________________________________________________________________________________________________________
[CREATION OF USER ACCOUNT][2020-10-14]

PHP see: "_http_buh.php" -> "createAccountMain()"
Java see: "HelpBuh.class" -> "createAccountPHP_main(String emailUserName, String ftgname, String orgnr)"

OBS! The password is created at PHP-side randomly

Important to mention: when the user account is created "buh_kund" and "buh_address" are also created
________________________________________________________________________________________________________
[PASSWORD HASHING & USER VALIDATION][2020-10-07]

So the main idea with hashing is that if a hacker get access to the DATABASE he will not be able to unhash a password.
So the idea is not that the hacker attacks from the login-page.

HASHING IS DONE IN: "_http_buh.php" -> "createAccount()" ----------> Using PHP's embeded "password_hash($pass,PASSWORD_DEFAULT)"
PASS VALIDATION IS DONE: _http_buh.php" -> "check_login($user, $pass)" ---------> Using PHP's embeded "password_verify($pass, $passHashed)"

________________________________________________________________________________________________________
[SEQURITY FUNCTIONS][2020-10-07]

Search for TAG: [#SEQURITY#] in both "DBEraser" and "MCWebNew" projects

PHP side, see: "_http_buh.php" -> "validate()"
Java side, see: "HelpBuh.class -> executePHP(String phpScriptName, String phpFunctionName, String json)"

1. PHP -> "_http_buh.php" -> "validate()" function is called first of all functions and if not "passed" the whole script will not execute further.
2. Java -> "BUH_INVOICE_MAIN.class" -> "DEFINE_KUNDID()"

A. Even if a hacker nows some "kundId" it's not possible to use it somehow as the validation is done uppon ALL of the requests.
________________________________________________________________________________________________________
[SQL INJECTION - PREPARED STATEMENTS] [2020-08-07]

See in "lib.php": "function connectPDO()" && "function executePreparedQueryPdo($q, $valuesArray)"

__________

"PREPARED STATEMENTS":

Note important to know when using:
1. Pay attentione at this example: $q = "SELECT MAX($column) as `latest` FROM $table WHERE kundId=?"; ---> PDO does not support replacing "$column" and "$table" with "?" [2020-10-08]
2. The values which are set instead of "?" should not contain additional "''"

IMPLEMENTED prepared statements for **ALL** functions including SELECT and other [2020-10-08]


__________

ESCAPE / UNESCAPE -> ALL "ESCAPING" IS DONE ON JAVA SIDE

[INCOMMING FROM PHP -> JAVA]
See: HelpBuh.class -> http_get_content_post(..) -> "return StringEscapeUtils.unescapeJava(value)"

[OUTGOING FROM JAVA -> PHP]
See: JSon.hashMapToJSON() -> StringEscapeUtils.escapeJava(value):
As example a String="Åland" is escaped to "\u00C5land"

======================
________________________________________________________________________________________________________




________________________________________________________________________________________________________
OLD INFO:

[HIGH VULNERABILITIES] [2020-08-07]

1. "INSERT" and "UPDATE" procedures as they use input from user



[LOW VULNERABILITIES] [2020-08-07]

1. "SELECT" procedures seems to be "low risk" as they are not based on INPUT from user
________________________________________________________________________________________________________